@model WebTemplate.Models.VesselMovement.Index

@{
    var PageAccess = (Session["CredentialPages"] as DataAccessLayer.Security.CredentialPages).GetPage("Movement/VesselMovement");

    ViewBag.title = PageAccess.PageName;
}

@functions {
    string BoldMatch(string value, string search)
    {
        value = value.ToLower();

        if (String.IsNullOrEmpty(search))
        {
            return value;
        }

        var idx1 = value.IndexOf(search);
        var idx2 = value.Substring(value.IndexOf(search) + 1);
        if (idx1 == -1)
        {
            return value;
        }

        value = value.Remove(idx1, search.Length);
        return value.Insert(idx1, $"<b style='font-weight: 800; color: #009688;'>{search}</b>");
        //ret += value.ToLower().Replace(search.ToLower(), $"<b style='font-weight: 800;'>{search.ToLower()}</b>");
    }
}

@if (!PageAccess.View)
{
}
else
{
    <div style=" display: flex;">
        <div class="to-be-hidden">
            <div id="form_search_params" class="row" style="padding: 0px;">
                @Html.HiddenFor(m => m.Page, new { @class = "form-control" })
                @Html.AntiForgeryToken()

                <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-12" hidden>
                    <label class="control-label">Code</label>
                    @Html.TextBoxFor(m => m.Code, new { @class = "form-control" })
                </div>

                <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-12">
                    <label class="control-label">Vessel</label>
                    @Html.TextBoxFor(m => m.Description, new { @class = "form-control" })
                </div>

                <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-12">
                    @*<label class="control-label" style="width: 100%; color: transparent;">Search</label>*@
                    <button type="button" id="btn_search" class="btn btn-primary font-bold"><i class="fa fa-search"></i> Search</button>
                </div>
            </div>

            <div id="form_search_results" class="pull-left" style="width: 100%;">
                <table id="VesselMovementsTable" class="table table-hover table-striped">
                    <thead>
                        @if (Model.VesselList.Count() > 0)
                        {
                            <tr>
                                <td class="text-right" colspan="10" style="background-color: white;">
                                    <div class="btn-group pull-left">
                                        @Html.AntiForgeryToken()

                                        @if (Model.Page > 0)
                                        {
                                            <button type="button" name="@Html.NameFor(m => m.Page)" value="1" class="btn btn-white @(Model.Page == 1 ? "active" : "pages")">1 @*<i class="fa fa-angle-double-left"></i>*@</button>
                                        }
                                        @if (Model.Page - 1 > 2)
                                        {
                                            <button type="button" name="@Html.NameFor(m => m.Page)" value="@(Model.Page - 2)" class="btn btn-white pages">...@*<i class="fa fa-angle-left"></i>*@</button>
                                        }
                                        @for (int i = Model.Page - 1; i <= Model.Page + 1; i++)
                                        {
                                            if (i > 1 && i < Model.PageCount)
                                            {
                                                <button type="button" name="@Html.NameFor(m => m.Page)" value="@(i)" class="btn btn-white @(i == Model.Page ? " active" : "pages")">@(i)</button>
                                            }
                                        }
                                        @if (Model.Page + 1 < Model.PageCount - 1)
                                        {
                                            <button type="button" name="@Html.NameFor(m => m.Page)" value="@(Model.Page + 2)" class="btn btn-white pages">...@*<i class="fa fa-angle-right"></i>*@</button>
                                        }
                                        @if (Model.Page <= Model.PageCount && Model.PageCount > 1)
                                        {
                                            <button type="button" name="@Html.NameFor(m => m.Page)" value="@Model.PageCount" class="btn btn-white @(Model.Page == Model.PageCount ? "active" : "pages")">@Model.PageCount @*<i class="fa fa-angle-double-right"></i>*@</button>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                        <tr>
                            <th style="text-align: left;" hidden>Code</th>
                            <th style="text-align: left;">Vessel</th>
                            @if (PageAccess.Update || PageAccess.Delete)
                            {
                                <th style="text-align: center; min-width: 5%;" scope="col">Action</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        <tr id="Row-Loading-Display" class="hidden">
                            <td style="text-align: center;" colspan="10">
                                <i id="" class="fa fa-rotate-left rotate" style="padding: 8px; font-size: 20px; text-align: right;"></i>
                            </td>
                        </tr>
                        @if (Model.VesselList.Count() > 0)
                        {
                            for (int i = 0; i < Model.VesselList.Count(); i++)
                            {
                                <tr id="@Model.VesselList[i].ID" class="Row-Display Row-Display-Vessel read" style="" title="" @*onclick="ViewVesselMovement(@Model.ID)"*@>
                                    <td nowrap class="text-left text-transform-uppercase" hidden>
                                        @Html.Raw(BoldMatch(Model.VesselList[i].Code, Model.Code))
                                        @Model.VesselList[i].Code
                                    </td>
                                    <td class="text-left text-transform-uppercase">
                                        <input type="hidden" value="@Model.VesselList[i].ID" />
                                        @Html.Raw(BoldMatch(Model.VesselList[i].Description, Model.Description))
                                    </td>
                                    <td style="" class="row-actions">
                                        <div class="btn-group">
                                            @if (PageAccess.View)
                                            {
                                                <button type="button" name="ViewCrews" class="btn btn-outline btn-info btn-sm btn-rounded ViewCrews m-l-sm" value="@Model.VesselList[i].ID" onclick="ViewCrews('@Model.VesselList[i].ID');" title="View Crews"><i class="fa fa-group fa-1x"></i></button>
                                            }
                                            @if (PageAccess.Update || PageAccess.Delete || PageAccess.View)
                                            {
                                                <button type="button" name="ViewVesselMovement" class="btn btn-success btn-sm btn-rounded ViewVesselMovement" value="@Model.VesselList[i].ID" onclick="ViewVesselMovement('@Model.VesselList[i].ID');" title="View Vessel Movement"><i class="fa fa-ship fa-1x"></i></button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr id="No-Row-Display"><td style="text-align: center;" colspan="8">No records found...</td></tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        @*<div class="hider" style="" title="hide" onclick="(function (e) { if ($('.hider').hasClass('not-displayed')) { console.log('displayed'); $('.hider').removeClass('not-displayed'); } else { console.log('not-displayed'); $('.hider').addClass('not-displayed'); } })();">
            <i class="fa fa-chevron-right"></i>
            <i class="fa fa-chevron-left"></i>
        </div>*@
    </div>
}

<style>
    .to-be-hidden {
        transition: width linear 1s;
    }

    .hider {
        text-align: center;
        width: 4vh;
        background: #eee;
        padding-right: .6em;
    }

    .hider.not-displayed {        
        padding-left: .6em;
    }

    .hider:hover {
        cursor: pointer;
        background: #ddd;
    }

    .hider i {
        position: absolute;
        top: 50%;
        -ms-transform: translateY(-50%);
        transform: translateY(-50%);
    }

    .hider.not-displayed i.fa-chevron-right {
        display: none;
    }

    .hider i.fa-chevron-left {
        display: none;
    }

    .hider.not-displayed i.fa-chevron-left {
        display: block;
    }
</style>