@model WebTemplate.Models.Groups.Index

@{
    var PageAccess = (Session["CredentialPages"] as DataAccessLayer.Security.CredentialPages).GetPage("HumanResource/Group");

    ViewBag.title = PageAccess.PageName;
}

<div class="wrapper wrapper-content">
    <div class="page-heading">
        <div class="col-lg-12">
            @Html.Partial("~/Views/Shared/_Breadcrumbs.cshtml", PageAccess)
        </div>
    </div>
    <div class="" style="margin-top: 80px;">
        <div class="col-xs-12 col-sm-12 col-md-push-2 col-md-8 col-lg-push-3 col-lg-6 animated fadeInLef">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 m-b-sm" style="padding: 0px;">
                <div class="tabs-container" style="">
                    <div class="tab-content" style="margin-top: 0px; max-height: unset; overflow-y: auto; overflow-x: hidden;">
                        @if (PageAccess.View)
                        {
                            <div id="tab-2" class="tab-pane active" style="">
                                <div id="GroupsForm" class="panel-body" style="padding: 10px; max-height: 100%; border: 1px solid #e5e6e7; overflow-y: hidden;">
                                    @Html.Partial("~/Views/HumanResource/Group/_GroupsSearch.cshtml")
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<input type="hidden" id="StoreEditModel" />

<div id="" class="customFileInput hidden">
    <div class="input-group file-input">
        <span class="input-group-addon"><i class="fa fa-file"></i></span>
        <input type="text" name="File" class="browseFileCustom form-control text-transform-none" placeholder="File..." readonly="readonly" />
        <span id="" class="clearInput" title="Clear"><i class="fa fa-times"></i></span>
    </div>
</div>

<div class="modal inmodal custom-modal" id="ViewMembers" data-backdrop="static" data-keyboard="false" tabindex="" role="dialog" aria-hidden="true">
    <div class="vertical-alignment-helper">
        <div class="modal-center vertical-align-center">
            <div class="modal-content animated fadeInDown modal-width-60">
                <form id="form_viewmembers"></form>
                @if (PageAccess.Update)
                {
                    <div class="modal-footer">
                        <button id="SaveMembers" class="btn btn-primary pull-right" value="" disabled="disabled">Save Members</button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<style>
    .image-crop {
        overflow: hidden;
        text-align: -webkit-center;
    }

        .image-crop > .cropper-container {
            width: 150px !important;
            height: 150px !important;
            left: 0px !important;
            top: 0px !important;
        }
</style>
<script type="text/javascript">
        var PageAccess = @Html.Raw(Json.Encode(PageAccess));
        var editMode = false;

        $(document).ready(function() {
            Events();
            $("#ViewMembers").on("hidden.bs.modal",
                function () {
                    ShowLoadingScreen();
                    location.reload();
                })
        });

        function EditTable() {
            var rowID = parseFloat($(this).val());
            var divName = $(this).attr('name').replace('Edit', '');
            var inputName = $(this).attr('name');
            $displayRow = $('#' + divName + 'sTable tr#' + rowID + '.Row-Display');
            $inputRow = $('#' + divName + 'sTable tr#' + rowID + '.Row-Input');
            var fileName = $displayRow.find('a').text().replace('\\' + divName + 's\\', '');
            if ($('#' + divName + 'sTable tbody tr.Row-Input').is(':visible') == false) {
                $displayRow.addClass('hidden');
                $inputRow.removeClass('hidden');
                $inputRow.find('.browseFileCustom').val(fileName);
                editMode = true;
            }
        }

        function CancelTable() {
            var rowID = parseFloat($(this).val());
            var divName = $(this).attr('name').replace('Cancel', '');
            var title = $(this).attr('title');
            $displayRow = $(this).closest('tr').prev('tr');
            $inputRow = $(this).closest('tr');

            if (rowID > 0) {
                var params = $('#' + divName + 'sTable tr#' + rowID + '.Row-Input *').serialize() +
                    '&__RequestVerificationToken=' +
                    $('@Html.AntiForgeryToken()').val() +
                    '&ID=' +
                    rowID;

                var urlAction = '';
                switch (divName) {
                case 'Group':
                    urlAction = '@Url.Action("CancelPersonnelGroup", "Groups")';
                    break;
                default:
                    urlAction = '@Url.Action("CancelPersonnelGroup", "Groups")';
                    break;
                }

                $.ajax({
                    data: params,
                    type: 'POST',
                    datatype: 'JSON',
                    url: urlAction,
                    cache: false,
                    beforeSend: function() {
                        ShowLoadingScreen()
                    },
                    complete: function() {
                        RemoveLoadingScreen()
                    },
                    success: function(response) {
                        if (response.msg == null) {
                            $displayRow.after(response);
                            $inputRow.remove();
                            $displayRow.remove();

                            if ($('#' + divName + 'sTable tbody tr.Row-Input').length == 0) {
                                $('#' + divName + 'sTable tbody tr#No-Row-Display').hide();
                            }

                            Events();
                            $('#StoreEditModel').val('');
                            //toastr.success(divName + ' saved!', 'Success');
                        } else {
                            toastr.error(response.res);
                        }
                    },
                    error: function(x) {
                    }
                });
            } else {
                $(this).closest('tr').find('input.form-control').val('');
                $(this).closest('tr').find('select.form-control').val(0).trigger('change');
            }

            $('#StoreEditModel').val($(this).closest('tr#' + rowID + " *").serialize() +
                '&__RequestVerificationToken=' +
                $('@Html.AntiForgeryToken()').val());
            editMode = false;
        }

        function DeleteTable() {
            var groupID = parseFloat($(this).val());
            var divName = $(this).attr('name').replace('Delete', '');
            var tr = $(this).closest('tr');
            var groupName = tr.find('td:eq(0)').text().trim();
            var memberCount = parseFloat(tr.find('input.MemberCount').val());

            swal({
                    title: 'Confirm Delete',
                    text: 'You are about to delete the ff:<br/><b>Group Name: ' +
                        groupName +
                        '<br/>Member/s: ' +
                        tr.find('input.MemberCount').val() +
                        '</b><br/>Continue?',
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonClass: "btn-danger",
                    confirmButtonText: "Yes",
                    confirmButtonColor: '#1ab394',
                    cancelButtonText: "No",
                    cancelButtonColor: '#FFEB3B',
                    closeOnConfirm: true,
                    closeOnCancel: true,
                    html: true
                },
                function(confirm) {
                    if (confirm) {
                        var urlAction = '';
                        switch (divName) {
                        case 'Group':
                            urlAction = '@Url.Action("DeletePersonnelGroup", "Groups")';
                            break;
                        default:
                            urlAction = '@Url.Action("DeletePersonnelGroup", "Groups")';
                            break;
                        }

                        $.ajax({
                            data: {
                                id: groupID,
                                __RequestVerificationToken: $('@Html.AntiForgeryToken()').val()
                            },
                            type: 'POST',
                            datatype: 'JSON',
                            url: urlAction,
                            cache: false,
                            beforeSend: function() {
                                ShowLoadingScreen()
                            },
                            complete: function() {
                                RemoveLoadingScreen()
                            },
                            success: function(response) {
                                if (response.msg) {
                                    toastr.success(groupName + "'s Profile deleted!");
                                    tr.remove();
                                    location.reload();

                                    if ($('#' + divName + 'sTable tbody tr.Row-Input').length == 0) {
                                        $('#' + divName + 'sTable tbody tr#No-Row-Display').hide();
                                    }
                                } else {
                                    toastr.error(response.res);
                                }
                            },
                            error: function(x) {
                            }
                        });
                    }
                });
        }

        function SaveTable() {
            var rowID = parseFloat($(this).val());
            var divName = $(this).attr('name').replace('Save', '');
            $displayRow = $(this).closest('tr').prev('tr.Row-Display');
            $inputRow = $(this).closest('tr.Row-Input');
            var formdata = new FormData(),
                hasFile = false,
                params = $('#' + divName + 'sTable tr#' + rowID + '.Row-Input *').serialize() +
                    '&__RequestVerificationToken=' +
                    $('@Html.AntiForgeryToken()').val() +
                    '&ID=' +
                    rowID;

            var urlAction = '';
            switch (divName) {
            case 'Group':
                urlAction = '@Url.Action("SavePersonnelGroup", "Groups")';
                    $('#' + divName + 'sTable tr#' + rowID + '.Row-Input *').each(function() {
                    formdata.append($(this).attr('name'), $(this).val());
                });
                break;
            default:
                urlAction = '@Url.Action("SavePersonnelGroup", "Groups")';
                break;
            }

            if (hasFile) {
                formdata.append("__RequestVerificationToken", $('@Html.AntiForgeryToken()').val());
                formdata.append("ID", rowID);

                if ($inputRow.find(".browsefile")[0].files.length > 0)
                    formdata.append("fileBase", $inputRow.find(".browsefile")[0].files[0]);

                params = formdata;
            }

            $.ajax({
                data: params,
                type: 'POST',
                datatype: 'JSON',
                url: urlAction,
                cache: false,
                contentType: !hasFile && 'application/x-www-form-urlencoded; charset=UTF-8',
                processData: !hasFile,
                beforeSend: function() {
                    ShowLoadingScreen()
                },
                complete: function() {
                    RemoveLoadingScreen()
                },
                success: function(response) {
                    if (response.msg == null) {
                        if (rowID > 0) {
                            $displayRow.after(response);
                            $inputRow.remove();
                            $displayRow.remove();
                        } else {
                            $('#' + divName + 'sTable tbody').append(response);
                            $inputRow.find('input.form-control').val('');
                            $inputRow.find('select.form-control').val('').trigger('click');
                        }

                        $('tr#0 select').val(0).trigger('change')

                        if ($('#' + divName + 'sTable tbody tr.Row-Input').length > 0) {
                            $('#' + divName + 'sTable tbody tr#No-Row-Display').hide();
                        }

                        Events();
                        $('#StoreEditModel').val('');
                        toastr.success(divName + ' saved!', 'Success');
                        editMode = false;
                    } else {
                        toastr.error(response.res);
                    }
                },
                error: function(x) {
                }
            });
        }

        function EnableDelete() {
            var id = parseFloat($(this).val() ? $(this).val() : 0);
            var description = $(this).closest('tr').find('.clickable-text').text().trim();

            if ($(this).is(':checked')) {
                $_SelectedRows = $_SelectedRows.filter(function (e) { return e.ID !== id; });
            }
            else {
                if ($_SelectedRows.filter(function (e) { return e.ID == id; }).length == 0)
                    $_SelectedRows.push({ ID: id, Description: description });
            }

            var rowCount = $(this).closest('table').find('tbody tr.Row-Display .chkRow').length;
            $('#SelectAll').iCheck(($_SelectedRows.length == rowCount ? '' : 'un') + 'check');
            $('#MultipleDelete').attr('disabled', $_SelectedRows.length > 0 ? false : true);
        }

        function MultipleDelete() {
            var pagetitle = $('.page-heading h2').text().trim().toLowerCase();
            var message = $_SelectedRows.length + ' ' + pagetitle + ($_SelectedRows.length > 1 ? 's' : '');

            swal({
                title: 'Delete ' + message + '?',
                text: "",
                type: "warning",
                showCancelButton: true,
                confirmButtonClass: "btn-danger",
                confirmButtonText: "Yes",
                cancelButtonText: "No",
                closeOnConfirm: true,
                closeOnCancel: true
            },
            function(confirm) {
                if (confirm) {
                    $.ajax({
                        data: {
                            'ids': JSON.stringify($_SelectedRows),
                            '__RequestVerificationToken': $('@Html.AntiForgeryToken()').val()
                        },
                        type: 'POST',
                        datatype: 'JSON',
                        url: '@Url.Action("DeleteMultiple", "Groups")',
                        async: true,
                        cache: false,
                        beforeSend: function(x) {
                            ShowLoadingScreen()
                        },
                        complete: function() {
                            RemoveLoadingScreen()
                        },
                        success: function(response) {
                            if (response.msg) {
                                toastr.success(message + ' deleted!');
                                Search();
                            } else {
                                toastr.error(response.res);
                            }
                        },
                        error: function(x) {
                        }
                    })
                }
            });
        }

        function SelectAllRows() {
            $checkRows = $(this).closest('table').find('input.chkRow');

            if ($(this).is(':checked')) {
                $checkRows.iCheck('uncheck');
                $_SelectedRows = [];
            }
            else {
                $checkRows.iCheck('check');

                $checkRows.each(function (e) {
                    var id = parseFloat($(this).val() ? $(this).val() : 0);
                    var description = $(this).closest('tr').find('.clickable-text').text().trim();

                    if ($_SelectedRows.filter(function (e) { return e.ID == id; }).length == 0)
                        $_SelectedRows.push({ ID: id, Description: description });
                });
            }

            $('#MultipleDelete').attr('disabled', $_SelectedRows.length > 0 ? false : true);
        }

        function ViewMemberRow() {
            var rowID = $(this).find('button.ViewMembers').val();
            if (!editMode)
                ViewMembers(rowID);
        }

        function ViewMember() {
            var rowID = parseFloat($(this).val());
            ViewMembers(rowID);
        }

        function ViewMembers(rowID) {
            $.ajax({
                data: {
                    PersonnelGroupID: rowID,
                    __RequestVerificationToken: $('@Html.AntiForgeryToken()').val()
                },
                type: 'POST',
                datatype: 'JSON',
                url: '@Url.Action("GetMembers", "Groups")',
                cache: false,
                beforeSend: function() {
                    ShowLoadingScreen();
                },
                complete: function() {
                    RemoveLoadingScreen();
                },
                success: function(response) {
                    if (response.msg == null) {
                        $('#form_viewmembers').html(response);
                        $('#ViewMembers').appendTo("body").modal('show');
                        $('#ViewMembers #SaveMembers').val(rowID);

                        BindSaveFunction();
                    } else {
                        toastr.error(response.res);
                    }
                },
                error: function(x) {
                }
            })
        }

        function SaveMembers() {
            var rowID = parseFloat($(this).val());
            var formdata = $('#MembersTable tbody tr.member *').serialize() + "&__RequestVerificationToken=" + $('@Html.AntiForgeryToken()').val();

            $.ajax({
                data: formdata,
                type: 'POST',
                datatype: 'JSON',
                url: '@Url.Action("SaveMembers", "Groups")',
                beforeSend: function() {
                    ShowLoadingScreen();
                },
                complete: function() {
                    RemoveLoadingScreen();
                },
                success: function(response) {
                    if (response.msg == null) {
                        $('#MemberTableDiv').html(response);
                        $('#ViewMembers #SaveMembers').val(rowID);
                        $("#SearchTable").find('#SearchPersonnelInput').val('');
                        $("#PersonnelsTable tbody tr.personnel").remove();
                        BindSaveFunction();
                        $('#SaveMembers').attr('disabled', true);
                    } else {
                        toastr.error(response.res);
                    }
                },
                error: function(x) {
                }
            })
        }

        function AddRemoveMember() {
            var personnelID = parseFloat($(this).val()),
                tableName = $(this).closest('table').attr('id'),
                rowName = tableName.replace('sTable', ''),
                action = rowName == 'Personnel' ? 'Add' : 'Remove',
                groupMemberID = parseFloat($(this).closest('tr').find('td input.ID').val()),
                prevRowIndex = parseFloat($(this).closest('tr').find('td input.RowIndex').val());

            if (action == 'Add') {
                $personnelRow = $(this).closest('tr').clone();
                $personnelRow.removeClass().addClass('member Member-' + personnelID);
                $personnelRow.find('input.PersonnelGroupID').val($('#SaveMembers').val());
                $personnelRow.find('.AddRemoveMember').attr('title', 'Add as member');
                $personnelRow.find('.AddRemoveMember').removeClass('btn-info').addClass('btn-danger');
                $personnelRow.find('.AddRemoveMember').find('i').removeClass().addClass('fa fa-times');
                $('#MembersTable tbody').append($personnelRow);
                $(this).closest('tr').addClass('hidden');
            } else {
                $(this).addClass('hidden');
                $(this).closest('tr').find('input.Deleted').val(true);
                $(this).closest('tr').find('img').css('opacity', '0.5');
                $(this).closest('tr').find('.UndoRemoveMember').removeClass('hidden');
                $(this).closest('tr').addClass('text-muted bg-muted').find('b').removeClass('text-primary');

                if (groupMemberID == 0) {
                    $(this).closest('tr').remove();
                    $personnelRow.find('input.PersonnelGroupID').val(0);
                    $('#PersonnelsTable tr.Personnel-' + personnelID).removeClass('hidden');
                }
            }

            BindSaveFunction();
            $('#SaveMembers').removeAttr('disabled');
        }

        function UndoRemoveMember() {
            $(this).addClass('hidden');
            $(this).closest('tr').find('input.Deleted').val(false);
            $(this).closest('tr').find('img').css('opacity', '1');
            $(this).closest('tr').find('.AddRemoveMember').removeClass('hidden');
            $(this).closest('tr').removeClass('text-muted bg-muted').find('b').addClass('text-primary');
        }

        function KeyDown(e) {
            if (e.keyCode == 13) {
                if ($(this).attr('id') == 'SearchPersonnelInput')
                    SearchPersonnel();
                else
                    $(this).closest('tr').find('button[name="SaveGroup"]').trigger('click');
            }
        }

        function SearchPersonnel() {
            var key = $('#SearchPersonnelDiv input').val();

            $.ajax({
                url: '@Url.Action("SearchPersonnel", "Groups")',
                data: {
                    key: key,
                    '__RequestVerificationToken': $('@Html.AntiForgeryToken()').val()
                },
                type: "POST",
                cache: false,
                beforeSend: function() {
                    ShowLoadingScreen()
                },
                complete: function() {
                    RemoveLoadingScreen()
                },
                success: function(response) {
                    if (response.msg == null) {
                        $("#SearchTable").find('#SearchPersonnelInput').val(key);
                        $("#SearchTableDiv").html(response);
                        RemoveMemberInPersonnel();
                        $('#SearchPersonnelInput').focus();
                        BindSaveFunction();
                    } else {
                        toastr.error(response.res);
                    }
                },
                error: function() {
                    toastr.error('AJAX backend error', 'An error has occured.');
                }
            });
        }

        function SearchMember() {
            var searchString = $('#SearchMemberDiv input').val()
            res = 0;

            $('#MembersTable tbody tr').addClass('hidden');
            $('#MembersTable #No-Row-Display').addClass('hidden');
            $('#MembersTable tbody tr').each(function(e, i) {
                // var words = ($(this).text().length > 0 ? $(this).text().split(' ') : []);
                //for (var i = 0; i < words.length; i++) {
                //
                //}

                if ($(this).text().trim().toLowerCase().indexOf(searchString) != -1) {
                    $(this).removeClass('hidden');
                    res++;
                }
            });

            if (res == 0)
                $('#MembersTable #No-Row-Display').removeClass('hidden')
            else
                $('#MembersTable #No-Row-Display').addClass('hidden')
        }

        function BindSaveFunction() {
            //$('#MembersTable tbody tr button').off('click').on('click', SelectRow);
            //$('#MembersTable tbody tr button .selectMember').off('ifClicked').on('ifClicked', SelectRow);
            //$('#PersonnelsTable tbody tr button').off('click').on('click', SelectRow);
            //$('#PersonnelsTable tbody tr button .selectMember').off('ifClicked').on('ifClicked', SelectRow);

            $('.AddRemoveMember').off('click').on('click', AddRemoveMember);
            $('.UndoRemoveMember').off('click').on('click', UndoRemoveMember);

            $('#TableActions button[name="actionButton"]').off('click').on('click', ActionButton);

            $('#SearchPersonnel').off('click').on('click', SearchPersonnel);
            $('#SearchPersonnelInput').off('keyup').on('keyup', KeyDown);
            $('#SearchMemberInput').off('change input').on('change input', SearchMember);

            //$('#PersonnelsTable tbody tr button').off('click').on('click', SelectRow);
            //$('#MembersTable tbody tr button').off('click').on('click', SelectRow);
            $('#SaveMembers').off('click').on('click', SaveMembers);

            CheckTableRowCount();
            UpdateTableRowIndex();

            $('.i-checks').iCheck({
                checkboxClass: 'icheckbox_square-green',
                radioClass: 'iradio_square-green',
            });
        }

        function SelectRow() {
            $tableName = $(this).closest('table');
            $tr = $(this).closest('tr');
            $b = $tr.find('button');
            $cb = $tr.find('input[type="checkbox"]');

            if (PageAccess.Delete == true) {
                if ($cb.is(':checked')) {
                    $b.removeClass('btn-primary').addClass('btn-white');
                    $cb.iCheck('uncheck');
                } else {
                    $b.removeClass('btn-white').addClass('btn-primary');
                    $cb.iCheck('check');
                }
            }

            ResetActionButton($tableName);
        }

        function ActionButton() {
            var action = $(this).attr('title');

            switch (action) {
            case 'Add':
                $tableName.find('tbody tr.personnel').each(function(e) {
                    if ($(this).find('input[type="checkbox"]').is(':checked')) {
                        $personnelRow = $(this).closest('tr').clone();
                        $personnelRow.removeClass().addClass('member');
                        $personnelRow.find('input.PersonnelGroupID').val($('#SaveMembers').val());

                        $personnelRow.find('img').css('opacity', '1');
                        $personnelRow.removeClass('text-muted bg-muted').find('b').addClass('text-primary');
                        $personnelRow.find('button').addClass('btn-white');
                        $personnelRow.find('input[type="checkbox"]').attr('id', 'SelectMember')
                            .removeClass('SelectPersonnel').addClass('SelectMember');

                        $('#MembersTable tbody').append($personnelRow);
                        $(this).closest('tr').addClass('hidden');
                    }
                });
                break;
            default:
                if (PageAccess.Delete == true) {
                    $tableName.find('tbody tr.member').each(function(e) {
                        if ($(this).find('input[type="checkbox"]').is(':checked')) {
                            if ($(this).find('input.Deleted').val() == "false") {
                                if (parseFloat($(this).find('input.ID').val()) == 0) {
                                    $(this).remove();
                                    $('#PersonnelsTable tr#' + $(this).attr('id')).removeClass('hidden');
                                } else {
                                    $(this).find('button').removeClass('btn-primary');
                                    $(this).find('input.Deleted').val(true);
                                    $(this).find('img').css('opacity', '0.5');
                                    $(this).addClass('text-muted bg-muted').find('b').removeClass('text-primary');
                                }
                            } else {
                                $(this).find('input.Deleted').val(false);
                                $(this).find('img').css('opacity', '1');
                                $(this).removeClass('text-muted bg-muted').find('b').addClass('text-primary');
                                $(this).find('button').addClass('btn-white');
                            }
                        }
                    });
                } else {
                    toastr.error('You do not have permission to delete items.');
                }
                break;
            }

            BindSaveFunction();
            $('#MembersTable tbody tr input[type="checkbox"]').iCheck('uncheck');
            $(this).find('input.ID').val()
            ResetActionButton($tableName);
        }

        function ResetActionButton($tableName) {
            $('#TableActions button[title="Add"]').attr('disabled', 'disabled');
            $('#TableActions button[title="Remove"]').attr('disabled', 'disabled');
            $('#TableActions button[title="Undo"]').attr('disabled', 'disabled');

            switch ($tableName.attr('id')) {
            case 'MembersTable':
                if ($tableName.find('tbody tr input[type="checkbox"]:checked').length > 0) {
                    $('#TableActions button[title="Remove"]').removeAttr('disabled');

                    var deletedRows = $('#MembersTable tbody tr input.Deleted[value="true"]').length;
                    var unDeletedRows = $('#MembersTable tbody tr input.Deleted[value="false"]').length;

                    //if (deletedRows == 0) {
                    //    $('#TableActions button[title="Remove"] i').remove();
                    //    $('#TableActions button[title="Remove"]').html('<i class="fa fa-times"></i>');
                    //}
                    //if (unDeletedRows == 0) {
                    //    $('#TableActions button[title="Remove"] i').remove();
                    //    $('#TableActions button[title="Remove"]').html('<i class="fa fa-undo"></i>');
                    //}
                    //if (deletedRows > 0) {
                    //    $('#TableActions button[title="Remove"] i').remove();
                    //    $('#TableActions button[title="Remove"]').html('<i class="fa fa-times"></i> &nbsp; <i class="fa fa-undo"></i>');
                    //}
                }
                break;
            case 'PersonnelsTable':
                if ($tableName.find('tbody tr input[type="checkbox"]:checked').length > 0) {
                    $('#TableActions button[title="Add"]').removeAttr('disabled');
                }
                break;
            }
        }

        function CheckTableRowCount() {
            var tableNames = [];
            tableNames.push({ Table: 'PersonnelsTable', Class: 'personnel' });
            tableNames.push({ Table: 'MembersTable', Class: 'member' });

            for (var i = 0; i < tableNames.length; i++) {
                if ($('#' + tableNames[i].Table + ' tbody tr.' + tableNames[i].Class + ':visible').length > 0) {
                    $('#' + tableNames[i].Table + ' tbody tr#No-Row-Display').addClass('hidden');
                } else {
                    $('#' + tableNames[i].Table + ' tbody tr#No-Row-Display').removeClass('hidden');
                }
            }
        }

        function UpdateTableRowIndex() {
            $('#PersonnelsTable tbody tr.personnel').each(function (i, val) {
                $(this).find('input.PersonnelID').removeAttr('name').attr('name', 'model[' + i + '].PersonnelID');
                $(this).find('input.Deleted').removeAttr('name').attr('name', 'model[' + i + '].Deleted');
                $(this).find('input.PersonnelGroupID').removeAttr('name').attr('name', 'model[' + i + '].PersonnelGroupID');

                //$(this).find('button').removeClass('btn-primary').addClass('btn-white');
                //$(this).find('input[type="checkbox"]').iCheck('uncheck');
                //$(this).find('.icheckbox_square-green').removeClass('checked');
            });
            $('#MembersTable tbody tr.member').each(function (i, val) {
                $(this).find('input.PersonnelID').removeAttr('name').attr('name', 'model[' + i + '].PersonnelID');
                $(this).find('input.Deleted').removeAttr('name').attr('name', 'model[' + i + '].Deleted');
                $(this).find('input.PersonnelGroupID').removeAttr('name').attr('name', 'model[' + i + '].PersonnelGroupID');
            });
        }

        function RemoveMemberInPersonnel() {
            $('#MembersTable tbody tr td .PersonnelID').each(function(e) {
                //$('#PersonnelsTable tbody tr#' + $(this).val()).addClass('hidden');
                $('#PersonnelsTable tbody tr.Personnel-' + $(this).val()).addClass('hidden');
            });

            CheckTableRowCount();
        }

        function showClearInput($this) {
            var $input = $('#' + $this.attr('id'))
            var $clearBtn = $input.next('.clearInput');
            //$clearBtn.css("display", $input.val() == "" ? "none" : "block");

            if ($input.val() == "") {
                $clearBtn.hide();
            } else {
                $clearBtn.show();
            }
        }

        function ClearField() {
            $input = $(this).prev('input');
            $inputHidden = $(this).closest('td').find('input[type="hidden"]');
            $input.val('');
            $inputHidden.val('');
            showClearInput($input);

            if ($(this).parent().parent().find('input.form-control').attr('id') == 'browseImage' &&
                $('#ImageCanvasImg').attr('src') != '\Images\default.jpg') {
                $('#ImageCanvasImg').attr('src', '\\Images\\default.jpg');
                $input.val('default.jpg');
            }
        }

        function Search() {
            var params = $('#form_search_params *').serialize();

            $.ajax({
                url: '@Url.Action("Index", "Groups")',
                data: params,
                type: "GET",
                cache: false,
                beforeSend: function() {
                    ShowLoadingScreen()
                },
                complete: function() {
                    RemoveLoadingScreen()
                },
                success: function(response) {
                    if (response.msg == null) {
                        $("#GroupsForm").html(response);
                        Events();
                        $('#txt_search').focus()
                    } else {
                        toastr.error(response.res);
                    }
                },
                error: function() {
                    toastr.error('AJAX backend error', 'An error has occured.');
                }
            });
        }

        function Events() {
            SetRowLoadingDisplayColSpan();
            $_SelectedRows = [];

            $('.i-checks').iCheck({
                checkboxClass: 'icheckbox_square-green',
                radioClass: 'iradio_square-green',
            });

            $('.pages').off('click').on('click',
                function() {
                    $('#hid_page').val($(this).val())
                    Search();
                })
            $('#txt_search').off('keydown').on('keydown',
                function() {
                    if (event.keyCode == 13) {
                        $('#btn_search').click()
                    }
                })
            $('#btn_search').off('click').on('click', function() {
                $('#hid_search').val($('#txt_search').val());
                $('#hid_page').val(1);
                Search();
            });

            $('input.chkRow').off('ifClicked').on('ifClicked', EnableDelete);
            $('button#MultipleDelete').off('click').on('click', MultipleDelete);
            $('input#SelectAll').off('ifClicked').on('ifClicked', SelectAllRows);

            //$('#GroupsTable tbody tr.Row-Display').off('click').on('click', ViewMemberRow);
            $('.EditGroup').off('click').on('click', EditTable);
            //$('.DeleteGroup').off('click').on('click', DeleteTable);
            $('.SaveGroup').off('click').on('click', SaveTable);
            $('.CancelGroup').off('click').on('click', CancelTable);
            //$('.ViewMembers').off('click').on('click', ViewMember);
            //$('.AddRemoveMember').off('click').on('click', AddRemoveMember);
            //$('.UndoRemoveMember').off('click').on('click', UndoRemoveMember);

            $('#GroupsTable .Row-Input').off('keydown').on('keydown', KeyDown)

            $('.clearInput').off('click').on('click', ClearField);
        }
</script>