@model WebTemplate.Models.Personnel.Trainings
@{
    var trainingTypes = ProcessLayer.Processes.LookupProcess.GetTrainingType();

    var credential = (Session["CredentialPages"] as DataAccessLayer.Security.CredentialPages);
    var TrainingsAndSeminarsPageAccess = credential.GetPage("Trainings and Seminars") ?? new DataAccessLayer.System.Page();
}

<div class="table-responsive table-scroll" style="">
    <table id="TrainingsTable" class="table table-stripped table-bordered">
        <thead>
            <tr>
                <th class="text-center">Training Type</th>
                <th class="text-center">Provider</th>
                <th class="text-center">Title</th>
                <th class="text-center">Date</th>
                @if (TrainingsAndSeminarsPageAccess.Update || TrainingsAndSeminarsPageAccess.Delete)
                {
                    <th style="text-align: center; width: 139px;">Action</th>
                }
                </tr>
        </thead>
        <tbody>
            @if (Model.Training.Count() > 0)
            {
                for (int i = 0; i < Model.Training.Count(); i++)
                {
                    @Html.Partial("~/Views/HumanResource/Personnel/_PersonnelTraining.cshtml", Model.Training[i])
                }
            }
            else
            {
                <tr id="No-Row-Display"><td style="text-align: center;" colspan="6">No Trainings found...</td></tr>
            }
        </tbody>
        <tfoot>
            @if (TrainingsAndSeminarsPageAccess.Insert)
            {
            <tr id="Row-Input-Training-0" class="Row-Input">
                <td style="text-align: center;">
                    <input type="hidden" name="PersonnelID" class="PersonnelID" value="@Model.PersonnelID" />
                    @Html.DropDownList("TrainingTypeID", new SelectList(trainingTypes, "ID", "Description"), "N/A", new { @class = "form-control text-transform-none", @style = "" })
                </td>
                <td style="text-align: center;">
                    <input type="text" name="TrainingProvider" class="form-control text-transform-none" placeholder="Provider" />
                </td>
                <td style="text-align: center;">
                    <input type="text" name="Title" class="form-control text-transform-none" placeholder="Title" />
                </td>
                <td style="text-align: center;">
                    <div class="input-group date">
                        <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                        <input type="text" name="TrainingDate" class="form-control text-transform-none" />
                        <span id="" class="clearInput" title="Clear"><i class="fa fa-times"></i></span>
                    </div>
                </td>
                <td style="text-align: center; width: 168px;">
                    <div class="btn-group" style="">
                        <button type="button" name="CancelTraining" class="btn btn-outline btn-danger btn-sm btn-rounded CancelTraining TableCancelButton" value="0" title="Clear"><i class="fa fa-times"></i></button>
                        <button type="button" name="SaveTraining" class="btn btn-info btn-sm btn-rounded SaveTraining TableSaveButton" value="0" title="Add"><i class="fa fa-plus"></i></button>
                    </div>
                </td>
            </tr>
            }
                @*<tr>
                <td class="text-right" colspan="6">
                    <div class="btn-group">
                        @Html.AntiForgeryToken()
                        <input type="hidden" id="hid_search" name="@Html.NameFor(m => m.Filter)" value="@Html.ValueFor(m => m.Filter)" />
                        <input type="hidden" id="hid_page" name="@Html.NameFor(m => m.Page)" value="@Html.ValueFor(m => m.Page)" />

                        @if (Model.PageCount > 1)
                        {
                            <button type="button" name="@Html.NameFor(m => m.Page)" value="1" class="btn btn-white pages"><i class="fa fa-angle-double-left"></i></button>
                        }
                        @if (Model.Page - 1 >= 1)
                        {
                            <button type="button" name="@Html.NameFor(m => m.Page)" value="@(Model.Page - 1)" class="btn btn-white pages"><i class="fa fa-angle-left"></i></button>
                        }
                        @for (int i = Model.Page - 2; i <= Model.Page + 2; i++)
                        {
                            if (i >= 1 && i <= Model.PageCount)
                            {
                                <button type="button" name="@Html.NameFor(m => m.Page)" value="@(i)" class="btn btn-white @(i == Model.Page ? " active" : "pages" )">@(i)</button>
                            }
                        }
                        @if (Model.Page + 1 <= Model.PageCount)
                        {
                            <button type="button" name="@Html.NameFor(m => m.Page)" value="@(Model.Page + 1)" class="btn btn-white pages"><i class="fa fa-angle-right"></i></button>
                        }
                        @if (Model.Page < Model.PageCount)
                        {
                            <button type="button" name="@Html.NameFor(m => m.Page)" value="@Model.PageCount" class="btn btn-white pages"><i class="fa fa-angle-double-right"></i></button>
                        }
                    </div>
                </td>
            </tr>*@
            </tfoot>
    </table>
</div>