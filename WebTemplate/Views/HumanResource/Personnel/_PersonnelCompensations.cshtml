@model WebTemplate.Models.Personnel.CompensationsAndDeductions
@{
    var compensations = ProcessLayer.Processes.LookupProcess.GetCompensations();
    var currencies = ProcessLayer.Processes.LookupProcess.GetCurrency();

    var credential = (Session["CredentialPages"] as DataAccessLayer.Security.CredentialPages);
    var PageAccess = credential.GetPage("Compensations") ?? new DataAccessLayer.System.Page();
}


<div class="table-responsive table-scroll" style="">
    <table id="CompensationsTable" class="table table-stripped table-bordered">
        <thead>
            <tr>
                <th class="text-center">Description</th>
                <th class="text-center">Currency</th>
                <th class="text-center">Amount</th>
                <th class="text-center">Status</th>
                <th class="text-center">Remarks</th>
                @if (PageAccess.Update || PageAccess.Delete)
                {
                    <th style="text-align: center; width: 6.44%;">Action</th>
                }
            </tr>
        </thead>
        <tbody>
            @if (Model.Compensation.Count() > 0)
            {
                for (int i = 0; i < Model.Compensation.Count(); i++)
                {
                    @Html.Partial("~/Views/HumanResource/Personnel/_PersonnelCompensation.cshtml", Model.Compensation[i])
                }
            }
            else
            {
                <tr id="No-Row-Display"><td style="text-align: center;" colspan="6">No Compensations found...</td></tr>
            }
        </tbody>
        <tfoot>
            @if (PageAccess.Insert)
            {
                <tr id="Row-Input-Compensation-0" class="Row-Input">
                    <td style="text-align: center; width: 18%;">
                        <input type="hidden" name="PersonnelID" class="PersonnelID" value="@Model.PersonnelID" />
                        @Html.DropDownList("CompensationID", new SelectList(compensations, "ID", "Description", 0), "N/A", new { @class = "form-control CompensationIDs" })
                    </td>
                    <td style="text-align: center; width: 18%;">
                        @Html.DropDownList("CurrencyID", new SelectList(currencies, "ID", "Description", 0), "N/A", new { @class = "form-control CurrencyIDs" })
                    </td>
                    <td style="text-align: center;">
                        <input value="" name="NewAmount" class="form-control text-right" type="number" placeholder="0.00" />
                    </td>
                    <td></td>
                    <td></td>
                    <td style="text-align: center; width: 6.38%;">
                        <div class="btn-group" style="">
                            <button type="button" name="CancelCompensation" class="btn btn-outline btn-danger btn-sm btn-rounded CancelCompensation TableCancelButton" value="0" title="Clear"><i class="fa fa-times"></i></button>
                            <button type="button" name="SaveCompensation" class="btn btn-info btn-sm btn-rounded SaveCompensation TableSaveButton" value="0" title="Add"><i class="fa fa-plus"></i></button>
                        </div>
                    </td>
                </tr>
            }
            @*<tr>
                    <td class="text-right" colspan="6">
                        <div class="btn-group">
                            @Html.AntiForgeryToken()
                            <input type="hidden" id="hid_search" name="@Html.NameFor(m => m.Filter)" value="@Html.ValueFor(m => m.Filter)" />
                            <input type="hidden" id="hid_page" name="@Html.NameFor(m => m.Page)" value="@Html.ValueFor(m => m.Page)" />

                            @if (Model.PageCount > 1)
                            {
                                <button type="button" name="@Html.NameFor(m => m.Page)" value="1" class="btn btn-white pages"><i class="fa fa-angle-double-left"></i></button>
                            }
                            @if (Model.Page - 1 >= 1)
                            {
                                <button type="button" name="@Html.NameFor(m => m.Page)" value="@(Model.Page - 1)" class="btn btn-white pages"><i class="fa fa-angle-left"></i></button>
                            }
                            @for (int i = Model.Page - 2; i <= Model.Page + 2; i++)
                            {
                                if (i >= 1 && i <= Model.PageCount)
                                {
                                    <button type="button" name="@Html.NameFor(m => m.Page)" value="@(i)" class="btn btn-white @(i == Model.Page ? " active" : "pages" )">@(i)</button>
                                }
                            }
                            @if (Model.Page + 1 <= Model.PageCount)
                            {
                                <button type="button" name="@Html.NameFor(m => m.Page)" value="@(Model.Page + 1)" class="btn btn-white pages"><i class="fa fa-angle-right"></i></button>
                            }
                            @if (Model.Page < Model.PageCount)
                            {
                                <button type="button" name="@Html.NameFor(m => m.Page)" value="@Model.PageCount" class="btn btn-white pages"><i class="fa fa-angle-double-right"></i></button>
                            }
                        </div>
                    </td>
                </tr>*@
        </tfoot>
    </table>
</div>
