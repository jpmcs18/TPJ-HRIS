@model WebTemplate.Models.MemoArchive.MemoReplies
@using System.Configuration;

@{
    //var memoTypes = ProcessLayer.Processes.LookupProcess.GetMemoType();
    var memotype = Model.ParentMemo._MemoType.Description ?? "";
    string LastPerson = "", CurrentPerson;
    var MemoDate = Model.ParentMemo.MemoDate?.ToString("MM/dd/yyyy hh:mm tt");
    MemoDate = DateTime.Now.ToString("MMM dd") == MemoDate ? "Today" : DateTime.Now.AddDays(-1).ToString("MMM dd") == MemoDate ? "Yesterday" : MemoDate;
    var CreatedOn = Model.ParentMemo.CreatedOn?.ToString("MM/dd/yyyy hh:mm tt");
    var LastReplyer = Model.MemoArchives.Any() ? " (" + Model.MemoArchives.OrderByDescending(m => m.CreatedOn).Select(m => m._Sender.FullName).FirstOrDefault() + ")" : "";
    Dictionary<int, string> replyType = null;
    if (Model.ParentMemo._Groups.Count() > 0)
    {
        replyType = new Dictionary<int, string> { { 0, "Reply" + LastReplyer }, { 1, "Reply To All" }, { 2, "Forward" } };
    }
    else
    {
        replyType = new Dictionary<int, string> { { 0, "Reply" }, { 2, "Forward" } };
    }
    var file = Model.ParentMemo.File;
    var filename = Path.GetFileName(file);
    var Emails = "";
    var isOpen = Model.ParentMemo._MemoStatus.Description.ToUpper() != "CLOSED";
}
@functions{
    public bool IsImage(string str)
    {
        var imageExtensions = new string[] { ".jpg", ".jpeg", ".bmp", ".gif", ".png" };
        return imageExtensions.Contains(Path.GetExtension(str.ToLower()));
    }
}

<div class="mail-box-header">
    <h2 style="margin: 0; text-align: center;">Replies</h2>
</div>

<div id="RepliesView" style=" border-top: 1px solid #e7eaec;">
    <div id="Replies">
        <div id="Parent">
            <input id="MemoID" type="hidden" name="MemoID" value="@Model.ParentMemo.ID" />
            <input id="PersonnelId" type="hidden" name="personnelId" value="@Model.ParentMemo._Person.ID" />
            @if (Model.ParentMemo._Groups.Count > 0)
            {
                <input id="PersonnelGroupId" type="hidden" name="personnelGroupId" value="@Model.ParentMemo._Groups[0].ID" />
            }

            <h2 style="margin-bottom: 0;">@(Model.ParentMemo.Subject ?? "(No Subject)")</h2>
            <h3 style="margin: 0;">@($"{memotype} No. {Model.ParentMemo.MemoNo ?? "(No Number)"}")</h3>

            <br />

            <div class="reply" style="margin: 0;" onclick="View(@Model.ParentMemo.ID ?? 0)">
                From: <b>@(Model.ParentMemo.InReplyTo.HasValue ? Model.ParentMemo._Sender.FullName : "(You)")</b><br />

                @for (int i = 0; i < Model.Personnels.Count; i++)
                {
                    CurrentPerson = Model.Personnels[i].Email;
                    if (LastPerson != CurrentPerson)
                    {
                        Emails += i == 0 ? "<" : "";
                        Emails += (i > 0 ? ", " : "") + CurrentPerson;
                        LastPerson = CurrentPerson;
                        Emails += i == Model.Personnels.Count - 1 ? ">" : "";
                    }
                }

                To: <b>@(Model.ParentMemo._Groups.Any() ? Model.ParentMemo._Groups.First().Description : (Model.ParentMemo._Persons.Any() ? Model.ParentMemo._Persons.First().FullName : "No Recipient"))</b> @Emails<br />
                Created: @Html.Raw($"<b>{CreatedOn}</b>")<br /><br />
                @Html.Raw(MemoDate.Length > 0 ? $"Memo Date: <b>{MemoDate}</b><br />" : "")

                @if (Model.ParentMemo.IsExistFile == true)
                {
                    string extension = Path.GetExtension(filename);
                    string icon = extension == ".pdf" ? "-pdf" : (extension == ".xls" || extension == ".xlsx" ? "-excel" : (extension == ".zip" || extension == ".rar" ? "-zip" : (extension == ".doc" || extension == ".docx" ? "-word" : (extension == ".ppt" || extension == ".pptx" ? "-powerpoint" : (IsImage(file) ? "-image" : "")))));
                    //string mimetype = MIMETypesDictionary.Where(m => m.Key == extension.Remove(0, 1)).Select(m => m.Value).FirstOrDefault() ?? "";

                    <a href="@file" class="attached-file" target="_blank" title="View file" style="text-decoration: underline;" onclick="event.stopPropagation();">
                        <i class="fa fa-file@(icon)-o" style=""></i> @filename
                    </a>
                }
                else
                {
                    @Html.Raw("<div class='text-danger attached-file'>" + filename + "<br/>File not found!</div>")
                }
                @Html.Raw($"{(Model.ParentMemo.Description.Length > 0 ? "<br /><div class='description'>" + Model.ParentMemo.Description + "</div>" : "")}")
                @if (Model.ParentMemo.IsFailed == true)
                {
                    <div class="reply-toolbar">
                        @Html.Raw(Model.ParentMemo.IsFailed == true ? "<i class='fa fa-exclamation text-danger' title='Not Sent'></i>" : "")
                    </div>
                }
            </div>
        </div>

        @foreach (var m in Model.MemoArchives)
        {
            MemoDate = m.MemoDate?.ToString("MM/dd/yyyy hh:mm tt") ?? "";
            memotype = m._MemoType.Description ?? "";

            file = m.File;
            filename = Path.GetFileName(file);

            <div class="reply" onclick="View(@m.ID ?? 0)" title="Click to view">
                @{
                    var recipients = "";
                    foreach (var g in m._Groups) { recipients += g.Description; }
                    foreach (var g in m._Persons) { recipients += g.FullName; }
                }
                @Html.Raw($"From: <b>{(m.InReplyTo.HasValue && m.PersonnelReply == true ? m._Sender.FullName : "(You)")}</b><br />")
                @Html.Raw(m.PersonnelReply == true ? "" : $"To: <b>{recipients}</b><br />")

                Created: @Html.Raw($"<b>{m.CreatedOn?.ToString("MM/dd/yyyy hh:mm tt")}</b>")<br /><br />
                @Html.Raw(MemoDate.Length > 0 ? $"Memo Date: <b>{MemoDate}</b><br />" : "")

                @if (m.IsExistFile == true)
                {
                    string extension = Path.GetExtension(filename);
                    string icon = extension == ".pdf" ? "-pdf" : (extension == ".xls" || extension == ".xlsx" ? "-excel" : (extension == ".zip" || extension == ".rar" ? "-zip" : (extension == ".doc" || extension == ".docx" ? "-word" : (extension == ".ppt" || extension == ".pptx" ? "-powerpoint" : (IsImage(file) ? "-image" : "")))));
                    //string mimetype = MIMETypesDictionary.Where(m => m.Key == extension.Remove(0, 1)).Select(m => m.Value).FirstOrDefault() ?? "";

                    <a href="@file" class="attached-file" target="_blank" title="View file" style="text-decoration: underline;" onclick="event.stopPropagation();">
                        <i class="fa fa-file@(icon)-o" style=""></i> @filename
                    </a>
                }
                else
                {
                    if (!string.IsNullOrEmpty(m.File))
                    {
                        @Html.Raw("<div class='text-danger attached-file'>" + filename + "<br/>File not found!</div>")
                    }
                    else
                    {
                    }
                }

                @Html.Raw($"{(!string.IsNullOrEmpty(m.Description) ? $"<div class='description'>{m.Description}</div>" : "")}")
                    @if (m.IsFailed == true || m.PersonnelReply == false)
                    {
                        <div class="reply-toolbar">
                            @Html.Raw(m.IsFailed == true ? "<i class='fa fa-exclamation text-danger' title='Not Sent'></i>" : "")
                            @*@Html.Raw(m.PersonnelReply == false ? "<i class='fa fa-trash text-danger' title='Delete'></i>" : "")*@
                        </div>
                    }
            </div>
        }
    </div>

    @if (isOpen)
    {
        <div id="ReplyBox" class="m-t-lg m-b-sm">
            <div class="reply-input">
                @Html.DropDownList("Emails", new SelectList(Model.Personnels, "ID", "Email"), new { @class = "form-control" })
                <div class="reply-toolbar">
                    <button value="@Model.ParentMemo.ID" reply-option="1" class="btn btn-primary ReplyOption" title="Reply"><i class="fa fa-reply"></i> Reply</button>
                    @if (Model.Personnels.Count() > 1)
                    {
                        <button value="@Model.ParentMemo.ID" reply-option="2" class="btn btn-info ReplyOption" title="Reply All"><i class="fa fa-reply-all"></i> Reply All</button>
                    }
                    <button value="@Model.ParentMemo.ID" reply-option="0" class="btn btn-white ReplyOption" title="Foward"><i class="fa fa-mail-forward"></i> Forward</button>
                </div>
            </div>
        </div>
    }
</div>