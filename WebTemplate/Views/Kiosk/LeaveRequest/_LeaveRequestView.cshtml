@model ProcessLayer.Entities.Kiosk.LeaveRequest
@using System.Configuration;

@{
    var c = User as WebTemplate.Models.CustomPrincipal;
    var credential = (Session["CredentialPages"] as DataAccessLayer.Security.CredentialPages);
    var CreatorAccess = credential.GetPage("Creator Leave Request") ?? new DataAccessLayer.System.Page();
    var UploadDocumentAccess = credential.GetPage("Kiosk Upload Document") ?? new DataAccessLayer.System.Page();
    var leaveSubTypes = new Dictionary<int, string> { { 1, "Absent" }, { 2, "Half-day" } };
    var timeofday = new Dictionary<int, string> { { 1, "Morning" }, { 2, "Afternoon" } };

    var leaveTypes = ProcessLayer.Processes.LeaveTypeProcess.Instance.Value.GetList();
    var IsBulkUse = Model._LeaveType.BulkUse ?? false;
}
@functions{
    public bool IsImage(string str)
    {
        var ext = new string[] { ".jpg", ".jpeg", ".bmp", ".gif", ".png" };
        return ext.Contains(Path.GetExtension(str));
    }

    private static readonly Dictionary<string, string> MIMETypesDictionary = new Dictionary<string, string>
{
        {"ai", "application/postscript"},
        {"aif", "audio/x-aiff"},
        {"aifc", "audio/x-aiff"},
        {"aiff", "audio/x-aiff"},
        {"asc", "text/plain"},
        {"atom", "application/atom+xml"},
        {"au", "audio/basic"},
        {"avi", "video/x-msvideo"},
        {"bcpio", "application/x-bcpio"},
        {"bin", "application/octet-stream"},
        {"bmp", "image/bmp"},
        {"cdf", "application/x-netcdf"},
        {"cgm", "image/cgm"},
        {"class", "application/octet-stream"},
        {"cpio", "application/x-cpio"},
        {"cpt", "application/mac-compactpro"},
        {"csh", "application/x-csh"},
        {"css", "text/css"},
        {"dcr", "application/x-director"},
        {"dif", "video/x-dv"},
        {"dir", "application/x-director"},
        {"djv", "image/vnd.djvu"},
        {"djvu", "image/vnd.djvu"},
        {"dll", "application/octet-stream"},
        {"dmg", "application/octet-stream"},
        {"dms", "application/octet-stream"},
        {"doc", "application/msword"},
        {"docx","application/vnd.openxmlformats-officedocument.wordprocessingml.document"},
        {"dotx", "application/vnd.openxmlformats-officedocument.wordprocessingml.template"},
        {"docm","application/vnd.ms-word.document.macroEnabled.12"},
        {"dotm","application/vnd.ms-word.template.macroEnabled.12"},
        {"dtd", "application/xml-dtd"},
        {"dv", "video/x-dv"},
        {"dvi", "application/x-dvi"},
        {"dxr", "application/x-director"},
        {"eps", "application/postscript"},
        {"etx", "text/x-setext"},
        {"exe", "application/octet-stream"},
        {"ez", "application/andrew-inset"},
        {"gif", "image/gif"},
        {"gram", "application/srgs"},
        {"grxml", "application/srgs+xml"},
        {"gtar", "application/x-gtar"},
        {"hdf", "application/x-hdf"},
        {"hqx", "application/mac-binhex40"},
        {"htm", "text/html"},
        {"html", "text/html"},
        {"ice", "x-conference/x-cooltalk"},
        {"ico", "image/x-icon"},
        {"ics", "text/calendar"},
        {"ief", "image/ief"},
        {"ifb", "text/calendar"},
        {"iges", "model/iges"},
        {"igs", "model/iges"},
        {"jnlp", "application/x-java-jnlp-file"},
        {"jp2", "image/jp2"},
        {"jpe", "image/jpeg"},
        {"jpeg", "image/jpeg"},
        {"jpg", "image/jpeg"},
        {"js", "application/x-javascript"},
        {"kar", "audio/midi"},
        {"latex", "application/x-latex"},
        {"lha", "application/octet-stream"},
        {"lzh", "application/octet-stream"},
        {"m3u", "audio/x-mpegurl"},
        {"m4a", "audio/mp4a-latm"},
        {"m4b", "audio/mp4a-latm"},
        {"m4p", "audio/mp4a-latm"},
        {"m4u", "video/vnd.mpegurl"},
        {"m4v", "video/x-m4v"},
        {"mac", "image/x-macpaint"},
        {"man", "application/x-troff-man"},
        {"mathml", "application/mathml+xml"},
        {"me", "application/x-troff-me"},
        {"mesh", "model/mesh"},
        {"mid", "audio/midi"},
        {"midi", "audio/midi"},
        {"mif", "application/vnd.mif"},
        {"mov", "video/quicktime"},
        {"movie", "video/x-sgi-movie"},
        {"mp2", "audio/mpeg"},
        {"mp3", "audio/mpeg"},
        {"mp4", "video/mp4"},
        {"mpe", "video/mpeg"},
        {"mpeg", "video/mpeg"},
        {"mpg", "video/mpeg"},
        {"mpga", "audio/mpeg"},
        {"ms", "application/x-troff-ms"},
        {"msh", "model/mesh"},
        {"mxu", "video/vnd.mpegurl"},
        {"nc", "application/x-netcdf"},
        {"oda", "application/oda"},
        {"ogg", "application/ogg"},
        {"pbm", "image/x-portable-bitmap"},
        {"pct", "image/pict"},
        {"pdb", "chemical/x-pdb"},
        {"pdf", "application/pdf"},
        {"pgm", "image/x-portable-graymap"},
        {"pgn", "application/x-chess-pgn"},
        {"pic", "image/pict"},
        {"pict", "image/pict"},
        {"png", "image/png"},
        {"pnm", "image/x-portable-anymap"},
        {"pnt", "image/x-macpaint"},
        {"pntg", "image/x-macpaint"},
        {"ppm", "image/x-portable-pixmap"},
        {"ppt", "application/vnd.ms-powerpoint"},
        {"pptx","application/vnd.openxmlformats-officedocument.presentationml.presentation"},
        {"potx","application/vnd.openxmlformats-officedocument.presentationml.template"},
        {"ppsx","application/vnd.openxmlformats-officedocument.presentationml.slideshow"},
        {"ppam","application/vnd.ms-powerpoint.addin.macroEnabled.12"},
        {"pptm","application/vnd.ms-powerpoint.presentation.macroEnabled.12"},
        {"potm","application/vnd.ms-powerpoint.template.macroEnabled.12"},
        {"ppsm","application/vnd.ms-powerpoint.slideshow.macroEnabled.12"},
        {"ps", "application/postscript"},
        {"qt", "video/quicktime"},
        {"qti", "image/x-quicktime"},
        {"qtif", "image/x-quicktime"},
        {"ra", "audio/x-pn-realaudio"},
        {"ram", "audio/x-pn-realaudio"},
        {"ras", "image/x-cmu-raster"},
        {"rdf", "application/rdf+xml"},
        {"rgb", "image/x-rgb"},
        {"rm", "application/vnd.rn-realmedia"},
        {"roff", "application/x-troff"},
        {"rtf", "text/rtf"},
        {"rtx", "text/richtext"},
        {"sgm", "text/sgml"},
        {"sgml", "text/sgml"},
        {"sh", "application/x-sh"},
        {"shar", "application/x-shar"},
        {"silo", "model/mesh"},
        {"sit", "application/x-stuffit"},
        {"skd", "application/x-koan"},
        {"skm", "application/x-koan"},
        {"skp", "application/x-koan"},
        {"skt", "application/x-koan"},
        {"smi", "application/smil"},
        {"smil", "application/smil"},
        {"snd", "audio/basic"},
        {"so", "application/octet-stream"},
        {"spl", "application/x-futuresplash"},
        {"src", "application/x-wais-source"},
        {"sv4cpio", "application/x-sv4cpio"},
        {"sv4crc", "application/x-sv4crc"},
        {"svg", "image/svg+xml"},
        {"swf", "application/x-shockwave-flash"},
        {"t", "application/x-troff"},
        {"tar", "application/x-tar"},
        {"tcl", "application/x-tcl"},
        {"tex", "application/x-tex"},
        {"texi", "application/x-texinfo"},
        {"texinfo", "application/x-texinfo"},
        {"tif", "image/tiff"},
        {"tiff", "image/tiff"},
        {"tr", "application/x-troff"},
        {"tsv", "text/tab-separated-values"},
        {"txt", "text/plain"},
        {"ustar", "application/x-ustar"},
        {"vcd", "application/x-cdlink"},
        {"vrml", "model/vrml"},
        {"vxml", "application/voicexml+xml"},
        {"wav", "audio/x-wav"},
        {"wbmp", "image/vnd.wap.wbmp"},
        {"wbmxl", "application/vnd.wap.wbxml"},
        {"wml", "text/vnd.wap.wml"},
        {"wmlc", "application/vnd.wap.wmlc"},
        {"wmls", "text/vnd.wap.wmlscript"},
        {"wmlsc", "application/vnd.wap.wmlscriptc"},
        {"wrl", "model/vrml"},
        {"xbm", "image/x-xbitmap"},
        {"xht", "application/xhtml+xml"},
        {"xhtml", "application/xhtml+xml"},
        {"xls", "application/vnd.ms-excel"},
        {"xml", "application/xml"},
        {"xpm", "image/x-xpixmap"},
        {"xsl", "application/xml"},
        {"xlsx","application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"},
        {"xltx","application/vnd.openxmlformats-officedocument.spreadsheetml.template"},
        {"xlsm","application/vnd.ms-excel.sheet.macroEnabled.12"},
        {"xltm","application/vnd.ms-excel.template.macroEnabled.12"},
        {"xlam","application/vnd.ms-excel.addin.macroEnabled.12"},
        {"xlsb","application/vnd.ms-excel.sheet.binary.macroEnabled.12"},
        {"xslt", "application/xslt+xml"},
        {"xul", "application/vnd.mozilla.xul+xml"},
        {"xwd", "image/x-xwindowdump"},
        {"xyz", "chemical/x-xyz"},
        {"zip", "application/zip"}
    };
}

@Html.Hidden("PersonnelID", Model.PersonnelID, new { @class = "fix-values" })
@Html.Hidden("ID", Model.ID, new { @class = "fix-values" })

@if ((Model._LeaveType.HasDocumentNeeded ?? false))
{
    <div class="row">
        <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-12">
            @using (Html.BeginForm("PrintMedicard", "LeaveRequest", FormMethod.Post, new { @target = "_blank", @class = "pull-right" }))
            {
                <button class="btn btn-primary compose-mail pull-right" type="submit" id="PrintRequest" title="Print Request" onclick="event.stopPropagation();"><i class="fa fa-print"></i> Print</button>
                <input type="hidden" value="@Model.ID" name="requestId" />
                @Html.AntiForgeryToken()
            }
        </div>
    </div>
}

@*<div id="StartDateTimeDiv" class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-4">
        <label class="control-label">Start Date & Time</label>
        <label class="form-control">@(String.Format("{0:yyyy'-'MM'-'dd" + (IsBulkUse ? "" : "'T'HH':'mm") + "}", Model.StartDateTime))</label>
    </div>

    <div id="EndDateTimeDiv" class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-4@(IsBulkUse ? " hidden" : "")">
        <label class="control-label">End Date & Time</label>
        <label class="form-control">@(String.Format("{0:yyyy'-'MM'-'dd'T'HH':'mm}", Model.EndDateTime))</label>
    </div>*@

<div class="row">
    <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-4">
        <label class="control-label">Type</label>
        <label class="form-control">@(Model._LeaveType?.Description ?? "")</label>
    </div>

    <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-4">
        <label class="control-label">Requested Date</label>
        <label class="form-control">@(String.Format("{0:yyyy'-'MM'-'dd}", Model.RequestedDate))</label>
    </div>
</div>

<fieldset class="form-group">
    <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-4">
        <label class="control-label"></label>
        @{
            var leaveSubType = (Model.IsAbsent ?? false) ? 1 : 2;
        }
        <label class="form-control">@leaveSubTypes.Where(m => m.Key == leaveSubType).Select(m => m.Value).FirstOrDefault()</label>
    </div>

    <div id="IsAbsentFields" class="leaveSubTypes@((Model.IsAbsent ?? false) ? "" : " hidden")">
        <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-4">
            <label class="control-label">Period Start</label>
            <label class="form-control">@(String.Format("{0:yyyy'-'MM'-'dd}", Model.PeriodStart))</label>
        </div>

        <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-4">
            <label class="control-label">Period End</label>
            <label class="form-control">@(String.Format("{0:yyyy'-'MM'-'dd}", Model.PeriodEnd))</label>
        </div>

        <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-4">
            <label class="control-label">No. of Days</label>
            <label class="form-control" rows="4">@Model.NoofDays</label>
        </div>
    </div>

    <div id="IsHalfdayFields" class="@((Model.IsAbsent ?? false) ? " hidden" : "") leaveSubTypes">
        <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-4">
            <label class="control-label">Time of Day</label>
            @{
                var timeOfDay = (Model.IsMorning ?? false) ? 1 : 2;
            }
            <label class="form-control">@timeofday.Where(m => m.Key == timeOfDay).Select(m => m.Value).FirstOrDefault()</label>
        </div>
    </div>
</fieldset>

<div id="MedicardFields" class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-12 @(Model.LeaveTypeID == 3 ? "" : "hidden")">
    <fieldset class="row">
        <legend>Medicard Fields</legend>
        <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-4">
            <label class="control-label">Hospital</label>
            <label class="form-control">@Model.Hospital</label>
        </div>

        <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-4">
            <label class="control-label">Location</label>
            <label class="form-control">@Model.Location</label>
        </div>
    </fieldset>
</div>

@if (UploadDocumentAccess.View && Model.Approved == true && (Model._LeaveType.HasDocumentNeeded ?? false))
{
    var filename = Path.GetFileName(Model.File);
    //var appSettingPath = ConfigurationManager.AppSettings["LeaveSaveLocation"];
    //var directory = appSettingPath.Contains("~") ? Server.MapPath(appSettingPath) : appSettingPath;
    //var IsExistFile = System.IO.File.Exists(Path.Combine(directory, Path.GetFileName(Model.File))) && !String.IsNullOrEmpty(Model.File);

    if ((Model.Noted ?? false) && Model.ApprovedLeaveCredits > 0)
    {
        <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-8">
            <label class="control-label">Document</label>
            @*<label class="form-control" style="text-align: left; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;" title="@(filename)">@Html.Raw(filename)</label>*@

            @*<a href="@Model.File" class="attached-file" target="_blank" title="Download" style="text-decoration: underline;">
                <i class="fa fa-file" style=""></i> @Model.File
            </a><br /><br />

            @if (IsImage(Model.File))
            {
                <img width="50%" src="@Path.Combine(ConfigurationManager.AppSettings["LeaveSaveLocation"], Model.File)" title="@filename" class="attached-file" style="">
            }*@
        </div>
    }
    else
    {
        <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-4">
            <label class="control-label" style="width: 100%;">
                Choose Document
                <a title="Clear Document" class="pull-right" onclick="(function (e) { $('#browseFile').val(''); ClearDocument(); })()"><i class="fa fa-times"></i></a>
            </label>
            <input id="browseFile" type="file" style=" padding-top: 2px;" class="form-control" title="@(!string.IsNullOrEmpty(filename) ? filename : "Upload Document")" value="@filename" />
        </div>

        <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-4">
            <label class="control-label">Upload Document</label>
            @*<a href="@Model.File" class="attached-file" target="_blank" title="Download" style="text-decoration: underline;">
                <i class="fa fa-file" style=""></i> @Model.File
            </a><br /><br />

            @if (IsImage(Model.File))
            {
                <img width="50%" src="@Path.Combine(ConfigurationManager.AppSettings["LeaveSaveLocation"], Model.File)" title="@filename" class="attached-file" style="">
            }*@
            <button id="ValidateFile" type="button" onclick="ValidateFile()" class="form-control" disabled style="text-align: left; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;" title="@(!string.IsNullOrEmpty(filename) ? filename : "Upload Document")">@(!string.IsNullOrEmpty(filename) ? filename : "Upload")</button>
        </div>
    }
}

<div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-12">
    <label class="control-label">Reasons</label>
    <textarea class="form-control" rows="4" readonly>@Model.Reasons</textarea>
</div>

@if (!String.IsNullOrEmpty(Model.Remarks))
{
    <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <label class="control-label">Remarks</label>
        <textarea class="form-control" rows="4" readonly>@Model.Remarks</textarea>
    </div>
}

@if (!String.IsNullOrEmpty(Model.CancellationRemarks))
{
    <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <label class="control-label">Cancellation Remarks</label>
        <textarea class="form-control" rows="4">@Model.CancellationRemarks</textarea>
    </div>
}

@if (CreatorAccess.View)
{
    var Logs = new Dictionary<string, DateTime?>(){
        { "Created By:" + Model._Creator, Model.CreatedOn },
        { "Modified By:" + Model._Modifier, Model.ModifiedOn },
        { "Approved By:" + Model._Approver, Model.ApprovedOn },
        { "Cancelled By:" + Model._Cancel, Model.CancelledOn }
    };

    foreach (var l in Logs)
    {
        if (!String.IsNullOrEmpty(l.Key.Split(':')[1]))
        {
            <div class="form-group col-xs-12 col-sm-6 col-md-3 col-lg-3 m-t-lg">
                <div class='md-step-optional'>@l.Key.Split(':')[0]</div>
                <div class='md-step-optional'><b>@Html.Raw(l.Key.Split(':')[1] ?? "&nbsp;")</b></div>
                <div class='md-step-optional'>@Html.Raw(String.Format("{0:MM/dd/yyyy hh:mm tt}", l.Value) ?? "&nbsp;")</div>
            </div>
        }
    }
}
