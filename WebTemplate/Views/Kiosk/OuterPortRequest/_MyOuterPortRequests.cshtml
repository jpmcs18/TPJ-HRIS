@model WebTemplate.Models.Kiosk.Outer_Port_Request.Index

@{
    var credential = (Session["CredentialPages"] as DataAccessLayer.Security.CredentialPages);

    var locationTypes = ProcessLayer.Processes.LocationProcess.Instance.Value.GetList();
    var PageAccess = credential.GetPage("Kiosk/OuterPortRequest") ?? new DataAccessLayer.System.Page();
    var CreatorAccess = credential.GetPage("Creator OuterPort Request") ?? new DataAccessLayer.System.Page();
}

@if (PageAccess.View)
{
    <form id="form_search_params" class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-12" style="padding: 0px;">
        @Html.Hidden("Page", Model.Page, new { @class = "form-control" })

        <fieldset>
            <legend>Search</legend>
            @*<div class="form-group col-xs-12 col-sm-12 col-md-3 col-lg-2">
                <label class="control-label">Key</label>
                @Html.TextBox("Key", Model.Key, new { @class = "form-control search-values", @placeholder = "Key..." })
            </div>*@

            <div class="form-group col-xs-12 col-sm-12 col-md-3 col-lg-2">
                <label class="control-label">Location</label>
                @Html.DropDownList("LocationID", new SelectList(locationTypes, "ID", "Description"), "N/A", new { @class = "form-control" })
            </div>

            <div class="form-group col-xs-12 col-sm-4 col-md-3 col-lg-2">
                <label class="control-label">Start Date</label>
                @Html.TextBox("StartDate", String.Format("{0:yyyy'-'MM'-'dd}", Model.StartDateTime), new { @type = "date", @class = "form-control" })
                @*@Html.TextBox("StartDateTime", String.Format("{0:MM/dd/yyyy}", Model.StartDateTime), new { @class = "form-control js-datetimepicker", @placeholder = "" })
            <span id="" class="clearInput" title="Clear"><i class="fa fa-times"></i></span>*@
            </div>

            <div class="form-group col-xs-12 col-sm-4 col-md-3 col-lg-2">
                <label class="control-label">End Date</label>
                @Html.TextBox("EndingDateTime", String.Format("{0:yyyy'-'MM'-'dd}", Model.EndingDateTime), new { @type = "date", @class = "form-control" })
                @*@Html.TextBox("EndingDateTime", String.Format("{0:MM/dd/yyyy}", Model.EndingDateTime), new { @class = "form-control js-datetimepicker", @placeholder = "" })
            <span id="" class="clearInput" title="Clear"><i class="fa fa-times"></i></span>*@
            </div>

            <div class="form-group col-xs-12 col-sm-2 col-md-2 col-lg-2">
                <label class="control-label" style="width: 100%; color: #fff;">Search</label>
                <button type="button" id="btn_search" class="btn btn-primary font-bold"><i class="fa fa-search"></i> Search</button>
            </div>
        </fieldset>
    </form>
    @*<form id="status_search_params" class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-12" style="padding: 0px;">
        <fieldset>
            <legend>Status</legend>
            <div class="form-group col-xs-12 col-sm-3 col-md-2 col-lg-1">
                <label class="control-label">
                    @Html.CheckBoxFor(m => m.IsCancelled, new { @class = "i-checks status-checkbox" })
                    Cancelled
                </label>
            </div>

            <div class="form-group col-xs-12 col-sm-3 col-md-2 col-lg-1">
                <label class="control-label">
                    @Html.CheckBoxFor(m => m.All, new { @class = "i-checks status-checkbox" })
                    All
                </label>
            </div>
        </fieldset>
    </form>*@

    <form id="form_search" class="pull-left" style="width: 100%;">
        <div class="table-responsive" style="height: 650px;">
            <div class="mail-box">
                <table id="OuterPortRequestsTable" class="table table-hover table-mail">
                    <thead>
                        <tr>
                            <td class="text-right" colspan="10" style="background-color: white;">
                                <div class="pull-left m-r-md">
                                    <button type="button" id="MultipleDelete" class="btn btn-danger btn-sm" data-toggle="tooltip" data-placement="top" title="Delete selected rows">
                                        <i class="fa fa-trash-o"></i>
                                    </button>
                                </div>
                                <div class="btn-group pull-left">
                                    @if (Model.Page > 0)
                                    {
                                        <button type="button" name="@Html.NameFor(m => m.Page)" value="1" class="btn btn-white @(Model.Page == 1 ? "active" : "pages")">1 @*<i class="fa fa-angle-double-left"></i>*@</button>
                                    }
                                    @if (Model.Page - 1 > 2)
                                    {
                                        <button type="button" name="@Html.NameFor(m => m.Page)" value="@(Model.Page - 2)" class="btn btn-white pages">...@*<i class="fa fa-angle-left"></i>*@</button>
                                    }
                                    @for (int i = Model.Page - 1; i <= Model.Page + 1; i++)
                                    {
                                        if (i > 1 && i < Model.PageCount)
                                        {
                                            <button type="button" name="@Html.NameFor(m => m.Page)" value="@(i)" class="btn btn-white @(i == Model.Page ? " active" : "pages")">@(i)</button>
                                        }
                                    }
                                    @if (Model.Page + 1 < Model.PageCount - 1)
                                    {
                                        <button type="button" name="@Html.NameFor(m => m.Page)" value="@(Model.Page + 2)" class="btn btn-white pages">...@*<i class="fa fa-angle-right"></i>*@</button>
                                    }
                                    @if (Model.Page <= Model.PageCount && Model.PageCount > 1)
                                    {
                                        <button type="button" name="@Html.NameFor(m => m.Page)" value="@Model.PageCount" class="btn btn-white @(Model.Page == Model.PageCount ? "active" : "pages")">@Model.PageCount @*<i class="fa fa-angle-double-right"></i>*@</button>
                                    }
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <th style="text-align: center;" scope="col">
                                <input id="SelectAll" type="checkbox" class="i-checks" title="Select All" value="">
                            </th>
                            <th style="text-align: left;">Perseonnel</th>
                            <th style="text-align: left;">Location</th>
                            <th style="text-align: left;">Start/End Date</th>
                            <th style="text-align: left;">Purpose</th>
                            <th style="text-align: center;">Last Modified</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.OuterPortRequests.Count() > 0)
                        {
                            for (int i = 0; i < Model.OuterPortRequests.Count(); i++)
                            {
                                var RowColorLabel = ""; // Model.OuterPortRequests[i].Cancelled == true ? " label-danger" : Model.OuterPortRequests[i].Approved == true ? " label-primary" : Model.OuterPortRequests[i].ModifiedBy != null ? " label-success" : " label-info";
                                var LastStatus = Model.OuterPortRequests[i].Cancelled == true ? "<span class='label label-danger'>Cancelled</span>" : "<span class='label label-info'>Pending</span>";
                                var LastUser = Model.OuterPortRequests[i].Cancelled == true ? Model.OuterPortRequests[i]._Cancel : Model.OuterPortRequests[i].ModifiedBy != null ? Model.OuterPortRequests[i]._Modifier : Model.OuterPortRequests[i]._Creator;
                                var LastDate = Model.OuterPortRequests[i].Cancelled == true ? Model.OuterPortRequests[i].CancelledOn : Model.OuterPortRequests[i].ModifiedBy != null ? Model.OuterPortRequests[i].ModifiedOn : Model.OuterPortRequests[i].CreatedOn;


                                <tr id="Row-Display-OuterPortRequest-@Model.OuterPortRequests[i].ID" class="Row-Display Row-Display-OuterPortRequests @RowColorLabel" title="Left click here to open record" onclick="EditOrNewOuterPortRequest(@Model.OuterPortRequests[i].ID);">
                                    <td class="check-mail">
                                        @if (CreatorAccess.Delete)
                                        {
                                            <input type="checkbox" class="i-checks@(!Model.OuterPortRequests[i].Cancelled == true ? " chkRow" : "")" value="@Model.OuterPortRequests[i].ID">
                                        }
                                    </td>
                                    @{
                                        DateTime? StartDateTime = Model.OuterPortRequests[i].StartDate;
                                        DateTime? EndDateTime = Model.OuterPortRequests[i].EndDate;
                                    }
                                    <td class="text-left">
                                        @Html.Hidden("id", Model.OuterPortRequests[i].ID)
                                        @(String.Format("{0}. {1}", (i + 1) + ((Model.Page > 1 ? Model.GridCount : 0) * Model.Page), Model.OuterPortRequests[i]._Personnel != null ? Model.OuterPortRequests[i]._Personnel.FullName : "N/A"))
                                    </td>
                                <td class="text-left">
                                    @Model.OuterPortRequests[i]._Location.Description
                                </td>
                                    <td style="text-align: left;">
                                        @(StartDateTime.Value.ToString("MMM dd, yyyy")) @(EndDateTime.HasValue ? EndDateTime.Value.ToString("- MMM dd, yyyy") : "up to present")
                                    </td>
                                    <td style="text-align: left; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; max-width: 200px;">
                                        <text class="font-bold-500" style="text-align: left; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; max-width: 200px;" title="@Model.OuterPortRequests[i].Purpose">
                                            @Model.OuterPortRequests[i].Purpose
                                        </text>
                                    </td>
                                    <td class="text-center">
                                        @Html.Raw(String.Format("{0}<br/>{1:MM/dd/yyyy}", LastUser ?? "", LastDate))
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr id="No-Row-Display"><td style="text-align: center;" colspan="10">No @PageAccess.PageName found...</td></tr>
                        }
                        <tr id="Row-Loading-Display" class="hidden">
                            <td style="text-align: center;" colspan="6">
                                <i id="" class="fa fa-rotate-left rotate" style="padding: 8px; font-size: 20px; text-align: right;"></i>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </form>
}