@model WebTemplate.Models.RequestsApproval.Time_Edit_Request.Index

@{
    var credential = (Session["CredentialPages"] as DataAccessLayer.Security.CredentialPages);
    var timeEditRequests = credential.GetPage("RequestsApproval/TimeEditRequests") ?? new DataAccessLayer.System.Page();
    var timeEditApprover = credential.GetPage("Approver Time Edit Request") ?? new DataAccessLayer.System.Page();
}

<div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
    @if (timeEditRequests.View)
    {
    <div class="file-manager">
        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12" style="padding: 0px; margin: 0px -15px;">
            <div id="form_search_params" class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-12" style="padding: 0px;">
                <input type="hidden" id="hid_page" name="@Html.NameFor(m => m.Page)" value="@Html.ValueFor(m => m.Page)" />
                @Html.AntiForgeryToken()

                @if (timeEditApprover.Approve)
                {
                    <div class="form-group col-xs-12 col-sm-4 col-md-3 col-lg-2">
                        <label class="control-label">Personnel</label>
                        <input type="text" id="txt_personnel" class="form-control" name="Personnel" placeholder="Personnel..." value="@Model.Personnel" autofocus />
                    </div>
                }

            <div class="form-group col-xs-12 col-sm-4 col-md-3 col-lg-2">
                <label class="control-label">Start Date & Time</label>
                @Html.TextBox("LoginDateTime", String.Format("{0:yyyy'-'MM'-'dd'T'HH':'mm}", Model.LoginDateTime), new { @type = "datetime-local", @class = "form-control" })
                @*@Html.TextBox("LoginDateTime", String.Format("{0:MM/dd/yyyy hh:mm tt}", Model.LoginDateTime), new { @class = "form-control js-datetimepicker", @placeholder = "" })
                <span id="" class="clearInput" title="Clear"><i class="fa fa-times"></i></span>*@
            </div>

            <div class="form-group col-xs-12 col-sm-4 col-md-3 col-lg-2">
                <label class="control-label">End Date & Time</label>
                @Html.TextBox("LogoutDateTime", String.Format("{0:yyyy'-'MM'-'dd'T'HH':'mm}", Model.LogoutDateTime), new { @type = "datetime-local", @class = "form-control" })
                @*@Html.TextBox("LogoutDateTime", String.Format("{0:MM/dd/yyyy hh:mm tt}", Model.LogoutDateTime), new { @class = "form-control js-datetimepicker", @placeholder = "" })
                <span id="" class="clearInput" title="Clear"><i class="fa fa-times"></i></span>*@
            </div>

                <div class="form-group col-xs-12 col-sm-2 col-md-2 col-lg-2">
                    <label class="control-label" style="width: 100%; color: #fff;">Search</label>
                    <button type="button" id="btn_search" class="btn btn-primary font-bold"><i class="fa fa-search"></i> Search</button>
                </div>
            </div>
            <div id="status_search_params" class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-12" style="padding: 0px;">
                <div class="form-group col-xs-12 col-sm-3 col-md-2 col-lg-1">
                    <label class="control-label">
                        @Html.CheckBoxFor(m => m.IsPending, new { @class = "i-checks status-checkbox" })
                        @*<input type="checkbox" class="i-checks status-checkbox" name="IsPending" />*@
                        Pending
                    </label>
                </div>

                @*<div class="form-group col-xs-12 col-sm-3 col-md-2 col-lg-1">
                    <label class="control-label">
                        @Html.CheckBoxFor(m => m.IsExpired, new { @class = "i-checks status-checkbox" })
                        Expired
                    </label>
                </div>*@

                <div class="form-group col-xs-12 col-sm-3 col-md-2 col-lg-1">
                    <label class="control-label">
                        @Html.CheckBoxFor(m => m.IsCancelled, new { @class = "i-checks status-checkbox" })
                        Cancelled
                    </label>
                </div>

                <div class="form-group col-xs-12 col-sm-3 col-md-2 col-lg-1">
                    <label class="control-label">
                        @Html.CheckBoxFor(m => m.IsApproved, new { @class = "i-checks status-checkbox" })
                        Approved
                    </label>
                </div>

                <div class="form-group col-xs-12 col-sm-3 col-md-2 col-lg-1">
                    <label class="control-label">
                        @Html.CheckBoxFor(m => m.All, new { @class = "i-checks status-checkbox" })
                        All
                    </label>
                </div>
            </div>
        </div>
    </div>
    }
    <form id="form_search" class="pull-left" style="width: 100%;">
        <div class="table-responsive" style="height: 650px;">
            <div class="mail-box">
                <table id="TimeEditRequestsTable" class="table table-hover table-mail">
                    <thead>
                        @if (Model.TimeEditRequests.Count() > 0)
                        {
                            <tr>
                                <td class="text-right" colspan="10" style="background-color: white;">
                                    <div class="pull-left m-r-md">
                                        <button type="button" id="MultipleApprove" class="btn btn-primary btn-sm" data-toggle="tooltip" data-placement="top" title="Approve selected rows" disabled>
                                            <i class="fa fa-check"></i>
                                        </button>
                                        <button type="button" id="MultipleCancel" class="btn btn-danger btn-sm" data-toggle="tooltip" data-placement="top" title="Cancel selected rows" disabled>
                                            <i class="fa fa-ban"></i>
                                        </button>
                                    </div>

                                    <div class="btn-group pull-left">
                                        @if (Model.Page > 0)
                                        {
                                            <button type="button" name="@Html.NameFor(m => m.Page)" value="1" class="btn btn-white @(Model.Page == 1 ? "active" : "pages")">1 @*<i class="fa fa-angle-double-left"></i>*@</button>
                                        }
                                        @if (Model.Page - 1 > 2)
                                        {
                                            <button type="button" name="@Html.NameFor(m => m.Page)" value="@(Model.Page - 2)" class="btn btn-white pages">...@*<i class="fa fa-angle-left"></i>*@</button>
                                        }
                                        @for (int i = Model.Page - 1; i <= Model.Page + 1; i++)
                                        {
                                            if (i > 1 && i < Model.PageCount)
                                            {
                                                <button type="button" name="@Html.NameFor(m => m.Page)" value="@(i)" class="btn btn-white @(i == Model.Page ? " active" : "pages")">@(i)</button>
                                            }
                                        }
                                        @if (Model.Page + 1 < Model.PageCount - 1)
                                        {
                                            <button type="button" name="@Html.NameFor(m => m.Page)" value="@(Model.Page + 2)" class="btn btn-white pages">...@*<i class="fa fa-angle-right"></i>*@</button>
                                        }
                                        @if (Model.Page <= Model.PageCount && Model.PageCount > 1)
                                        {
                                            <button type="button" name="@Html.NameFor(m => m.Page)" value="@Model.PageCount" class="btn btn-white @(Model.Page == Model.PageCount ? "active" : "pages")">@Model.PageCount @*<i class="fa fa-angle-double-right"></i>*@</button>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    <tr>
                        <th style="text-align: center;" scope="col">
                            <input id="SelectAll" type="checkbox" class="i-checks" title="Select All" value="">
                        </th>

                        <th style="text-align: left;">No.</th>
                        <th style="text-align: left;">Start Date & Time</th>
                        <th style="text-align: left;">End Date & Time</th>
                        <th style="text-align: left;">Reason/s</th>
                        <th style="text-align: left;">Status</th>
                        <th style="text-align: left;">Last Modified</th>
                        <th style="text-align: left;">Remarks</th>

                        @if (timeEditRequests.Update || timeEditRequests.Delete)
                        {
                            <th style="text-align: center; min-width: 10%;" scope="col">Action</th>
                        }
                    </tr>
                    </thead>
                    <tbody>
                        <tr id="Row-Loading-Display" class="hidden">
                            <td style="text-align: center;" colspan="6">
                                <i id="" class="fa fa-rotate-left rotate" style="padding: 8px; font-size: 20px; text-align: right;"></i>
                            </td>
                        </tr>
                        @if (Model.TimeEditRequests.Count() > 0)
                        {
                            for (int i = 0; i < Model.TimeEditRequests.Count(); i++)
                            {
                        var RowColorLabel = ""; // Model.TimeEditRequests[i].TimeEditRequests[i].Cancelled == true ? " label-danger" : Model.TimeEditRequests[i].TimeEditRequests[i].Approved == true ? " label-primary" : Model.TimeEditRequests[i].TimeEditRequests[i].ModifiedBy != null ? " label-success" : " label-info";
                        var LastStatus = Model.TimeEditRequests[i].IsExpired == true ? "<span class='label label-warning'>Expired</span>" : (Model.TimeEditRequests[i].Cancelled == true ? "<span class='label label-danger'>Cancelled</span>" : (Model.TimeEditRequests[i].Approved == true ? "<span class='label label-primary'>Approved</span>" : "<span class='label label-info'>Pending</span>"));
                        var LastUser = Model.TimeEditRequests[i].Cancelled == true ? Model.TimeEditRequests[i]._Cancel : (Model.TimeEditRequests[i].Approved == true ? Model.TimeEditRequests[i]._Approver : (Model.TimeEditRequests[i].ModifiedBy != null ? Model.TimeEditRequests[i]._Modifier : Model.TimeEditRequests[i]._Creator));
                        var LastDate = Model.TimeEditRequests[i].Cancelled == true ? Model.TimeEditRequests[i].CancelledOn : (Model.TimeEditRequests[i].Approved == true ? Model.TimeEditRequests[i].ApprovedOn : (Model.TimeEditRequests[i].ModifiedBy != null ? Model.TimeEditRequests[i].ModifiedOn : Model.TimeEditRequests[i].CreatedOn));

                    <tr id="Row-Display-TimeEditRequests-@Model.TimeEditRequests[i].ID" class="Row-Display Row-Display-OuterPortRequest @RowColorLabel" style="">
                        @{
                            DateTime? StartDateTime = Model.TimeEditRequests[i].LoginDateTime;
                            DateTime? EndDateTime = Model.TimeEditRequests[i].LogoutDateTime;
                        }
                        <td class="text-center">
                            @if (timeEditRequests.Delete)
                            {
                                if (!(Model.TimeEditRequests[i].Approved == true || Model.TimeEditRequests[i].Cancelled == true || Model.TimeEditRequests[i].IsExpired == true))
                                {
                                    <input type="checkbox" class="i-checks chkRow" title="" value="@Model.TimeEditRequests[i].ID">
                                }
                                else
                                {
                                    <input type="checkbox" disabled class="i-checks" title="" value="">
                                }
                            }
                            <input hidden name="id" value="@Model.TimeEditRequests[i].ID" />
                            <input hidden name="personnelid" value="@Model.TimeEditRequests[i].PersonnelID" />
                        </td>
                        <td style="text-align: left;">
                            <input hidden name="id" value="@Model.TimeEditRequests[i].ID" />
                            <input hidden name="personnelid" value="@Model.TimeEditRequests[i].PersonnelID" />
                            @if (Model.TimeEditRequests[i].IsExpired == false)
                            {
                                if ((Model.TimeEditRequests[i].Approved == null && Model.TimeEditRequests[i].Cancelled == null) || (Model.TimeEditRequests[i].Approved == false && Model.TimeEditRequests[i].Cancelled == false))
                                {
                                    @(String.Format("{0}. {1}", (i + 1) + ((Model.Page > 1 ? Model.GridCount : 0) * Model.Page), Model.TimeEditRequests[i]._Personnel != null ? Model.TimeEditRequests[i]._Personnel.FullName : "N/A"))
                                }
                                else
                                {
                                    <div class="clickable-text" title="Click to view movement" onclick="EditOrNewOuterPortRequest(@Model.TimeEditRequests[i].ID)">@(String.Format("{0}. {1}", (i + 1) + ((Model.Page > 1 ? Model.GridCount : 0) * Model.Page), Model.TimeEditRequests[i]._Personnel != null ? Model.TimeEditRequests[i]._Personnel.FullName : "N/A"))</div>
                                }
                            }
                        </td>
                        <td style="text-align: left;">
                            @Html.Raw(String.Format("{0}{1}", StartDateTime.ToString() == DateTime.Now.ToString() ? "Today" : String.Format("<b>{0:MMM dd, yyyy}</b>", StartDateTime), (StartDateTime.ToString() == "" ? "" : " @ ") + String.Format("<b>{0:HH:mm tt}</b>", StartDateTime)))
                        </td>
                        <td style="text-align: left;">
                            @Html.Raw(String.Format("{0}{1}", EndDateTime.ToString() == DateTime.Now.ToString() ? "Today" : String.Format("<b>{0:MMM dd, yyyy}</b>", EndDateTime), (EndDateTime.ToString() == "" ? "" : " @ ") + String.Format("<b>{0:HH:mm tt}</b>", EndDateTime)))
                        </td>
                        <td style="text-align: left; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; max-width: 150px;">
                            <text class="font-bold-500" style="text-align: left; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; max-width: 100px;" title="@Model.TimeEditRequests[i].Reasons">
                                @Model.TimeEditRequests[i].Reasons
                            </text>
                        </td>
                        <td class="text-left">
                            @Html.Raw(LastStatus)
                        </td>
                        <td class="text-left">
                            @Html.Raw(String.Format("{0}<br/>{1:MM/dd/yyyy hh:mm tt}", LastUser ?? "", LastDate))
                        </td>
                     
                        <td style="text-align: left; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; max-width: 150px;">
                            <text class="font-bold-500" style="text-align: left; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; max-width: 100px;" title="@Model.TimeEditRequests[i].Remarks">
                                @Model.TimeEditRequests[i].Remarks
                            </text>
                        </td>
                        <td style="width: 160px;" class="row-actions">
                            <div class="btn-group">
                                @if (Model.TimeEditRequests[i].IsExpired == false)
                                {
                                    if ((Model.TimeEditRequests[i].Approved == null && Model.TimeEditRequests[i].Cancelled == null) || (Model.TimeEditRequests[i].Approved == false && Model.TimeEditRequests[i].Cancelled == false))
                                    {
                                        <button type="button" name="id" class="btn btn-danger btn-sm btn-rounded CancelOuterPortRequest" value="@Model.TimeEditRequests[i].ID" title="Cancel"><i class="fa fa-ban"></i></button>
                                        <button type="button" name="id" class="btn btn-primary btn-sm btn-rounded ApproveOuterPortRequest" value="@Model.TimeEditRequests[i].ID" title="Approve"><i class="fa fa-check"></i></button>
                                    }
                                    else
                                    {
                                        @*<button type="button" name="id" tpj-show-tab="#tab-3" class="btn btn-info btn-sm btn-rounded ViewOuterPortRequest" value="@Model.TimeEditRequests[i].ID" title="View"><i class="fa fa-eye"></i></button>*@
                                    }
                                }
                            </div>
                        </td>
                    </tr>
                            }
                        }
                        else
                        {
                            <tr id="No-Row-Display"><td style="text-align: center;" colspan="10">No @timeEditRequests.PageName found...</td></tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </form>
</div>